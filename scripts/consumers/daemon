#!/usr/bin/env php
<?php

/**
 *. Daemon
 *.
 *. Daemon consumer that uses high-level consumer connector and continuously
 *. polls for new messages with hard-coded back-off interval 1 second.
 *. Use CTRL+C to finalise the daemon.
 *.
 *. Usage: ./scripts/consumer/daemon -c {connector} -t {topic}
 *.            [-o {output-format}] [-n {num-events}]
 *.
 *.     -c      Connector, set which Zookeeper server you want to connect
 *.     -t      Topic, set the list of topics where you want to consume
 *.     -h      Help, will display the help for the script
 *.     -o      Output format, select between: json, php
 *.     -n      Number, show only N events
 *.     -r      Rewind the stream from beginning
 *
 * @author      Pau Gay <pau.gay@visualdna.com>
 * @date        2013-01-24
 */

error_reporting(E_ALL | E_STRICT);

// check script parametrs
$options = getopt("hc:t:lo:n:r");

// require kafka-php library
require __DIR__ . "/../../src/Kafka/Kafka.php";
require __DIR__ . "/../help.php";

if (!isset($options["c"])
    || !isset($options["t"])) {
    help();
}

$offset = \Kafka\Kafka::OFFSETS_LATEST;
if (isset($options['r'])) $offset = \Kafka\Kafka::OFFSETS_EARLIEST;

$connector = $options["c"];
$topicFilter = new \Kafka\TopicList(explode(",", $options["t"]));

// initialize connections
$consumerConnector = \Kafka\ConsumerConnector::Create($connector, "php-console-" . gethostname());
$messageStreams = $consumerConnector->createMessageStreamsByFilter(
    $topicFilter,
    65535,
    $offset
);

$count = 0;
while (true) {
    $fetchCount = 0;

    foreach ($messageStreams as $mid => $messageStream) {
        // keep getting messages, if we have more
        while ($message = $messageStream->nextMessage()) {
            $fetchCount++;
            $count++;

            if (isset($options["o"])
                && $options["o"] === "json") {
                echo $message->payload() . "\n";
            } else if (isset($options["o"])
                && $options["o"] === "php") {
                $data = json_decode($message->payload(), TRUE);
                var_export($data);
                echo "\n";
            } else {
                echo $message->payload();
                echo "\n";
            }

            if (isset($options["n"]) && $count >= $options["n"]) {
                exit(0);
            }
        }
    }

    if ($fetchCount == 0) {
        // no more messages, so sleep and try again
        sleep(1);
    }
}
